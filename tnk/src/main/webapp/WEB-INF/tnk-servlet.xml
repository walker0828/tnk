<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc.xsd"
	default-autowire="byName">

	<!-- free to access static resources -->
	<!-- <mvc:default-servlet-handler/> -->

	<!-- <mvc:resources location="/" mapping="/resource/**"/> -->
	<!-- <mvc:resources location="*.html" mapping="*.html" /> <mvc:resources 
		location="/css/" mapping="/css/**" /> <mvc:resources location="/fonts/" mapping="/fonts/**" 
		/> <mvc:resources location="/img/" mapping="/img/**" /> <mvc:resources location="/js/" 
		mapping="/js/**" /> -->

	<!--配置拦截器, 多个拦截器,顺序执行 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
			<mvc:mapping path="/**" />
			<bean class="com.tenderlitch.core.interceptor.PrivilegeInterceptor"></bean>
		</mvc:interceptor>
		<!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
	</mvc:interceptors>

	<mvc:annotation-driven>
		<!-- 解决@ResponseBody方法返回字符串时中文乱码 -->
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/plain;charset=UTF-8</value>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- <context:annotation-config /> -->
	<!-- 自动搜索@Controller,@Service,@Repository标注的类 -->
	<context:component-scan base-package="com.tenderlitch.controller">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<bean id="customObjectMapper" class="com.tenderlitch.core.json.CustomObjectMapper"
		init-method="init">
		<property name="camelCaseToLowerCaseWithUnderscores" value="false" />
		<property name="dateFormatPattern" value="yyyy-MM-dd HH:mm:ss" />
	</bean>
	<!--启动Spring MVC的注解功能完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>

	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="objectMapper" ref="customObjectMapper" />
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes">
			<value>
				json=application/json
				html=text/html
			</value>
		</property>
		<property name="defaultContentType" value="application/json" />
	</bean>
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="0" />
		<property name="contentNegotiationManager" ref="contentNegotiationManager" />
		<property name="viewResolvers">
			<list>
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="prefix" value="/" />
					<property name="suffix" value=".html" />
				</bean>
			</list>
		</property>
		<!-- 用于将对象转换为 JSON -->
		<property name="defaultViews">
			<list>
				<bean
					class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
					<property name="objectMapper" ref="customObjectMapper" />
				</bean>
			</list>
		</property>
	</bean>

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--<property name="maxUploadSize" value="10485760"></property> -->
	</bean>

	<!-- comment by tenderlitch@20170111 使用com.tenderlitch.core.advice.ExceptionAdvice来处理异常感觉更好更方便 -->
	<!-- 异常处理机制 -->
	<!-- <bean id="exceptionHandler" class="com.tenderlitch.core.exception.CommonExceptionHandler" 
		/> -->

</beans>